package com.me.plugin.templates.add;

import static org.objectweb.asm.Opcodes.*;


import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;

public class Template2 {

    public static void  fillfromCode(MethodVisitor methodVisitor){
        methodVisitor.visitCode();
        Label label0 = new Label();
        Label label1 = new Label();
        Label label2 = new Label();
        methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/InterruptedException");
        Label label3 = new Label();
        Label label4 = new Label();
        Label label5 = new Label();
        methodVisitor.visitTryCatchBlock(label3, label4, label5, null);
        Label label6 = new Label();
        methodVisitor.visitTryCatchBlock(label5, label6, label5, null);
        Label label7 = new Label();
        Label label8 = new Label();
        methodVisitor.visitTryCatchBlock(label7, label8, label8, "java/lang/InterruptedException");
        Label label9 = new Label();
        Label label10 = new Label();
        methodVisitor.visitTryCatchBlock(label7, label9, label10, null);
        Label label11 = new Label();
        methodVisitor.visitTryCatchBlock(label10, label11, label10, null);
        Label label12 = new Label();
        methodVisitor.visitLabel(label12);
        methodVisitor.visitLineNumber(108, label12);
        methodVisitor.visitTypeInsn(NEW, "java/util/concurrent/locks/ReentrantLock");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/concurrent/locks/ReentrantLock", "<init>", "()V", false);
        methodVisitor.visitVarInsn(ASTORE, 1);
        Label label13 = new Label();
        methodVisitor.visitLabel(label13);
        methodVisitor.visitLineNumber(109, label13);
        methodVisitor.visitVarInsn(ALOAD, 1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/locks/ReentrantLock", "newCondition", "()Ljava/util/concurrent/locks/Condition;", false);
        methodVisitor.visitVarInsn(ASTORE, 2);
        Label label14 = new Label();
        methodVisitor.visitLabel(label14);
        methodVisitor.visitLineNumber(110, label14);
        methodVisitor.visitTypeInsn(NEW, "java/util/PriorityQueue");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/PriorityQueue", "<init>", "()V", false);
        methodVisitor.visitVarInsn(ASTORE, 3);
        Label label15 = new Label();
        methodVisitor.visitLabel(label15);
        methodVisitor.visitLineNumber(111, label15);
        methodVisitor.visitInsn(ACONST_NULL);
        methodVisitor.visitVarInsn(ASTORE, 4);
        methodVisitor.visitLabel(label0);
        methodVisitor.visitLineNumber(113, label0);
        methodVisitor.visitVarInsn(ALOAD, 1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/locks/ReentrantLock", "lockInterruptibly", "()V", false);
        methodVisitor.visitLabel(label1);
        methodVisitor.visitLineNumber(116, label1);
        methodVisitor.visitJumpInsn(GOTO, label7);
        methodVisitor.visitLabel(label2);
        methodVisitor.visitLineNumber(114, label2);
        methodVisitor.visitVarInsn(ASTORE, 5);
        Label label16 = new Label();
        methodVisitor.visitLabel(label16);
        methodVisitor.visitLineNumber(115, label16);
        methodVisitor.visitVarInsn(ALOAD, 5);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/InterruptedException", "printStackTrace", "()V", false);
        methodVisitor.visitLabel(label7);
        methodVisitor.visitLineNumber(119, label7);
        methodVisitor.visitVarInsn(ALOAD, 3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/PriorityQueue", "peek", "()Ljava/lang/Object;", false);
        methodVisitor.visitVarInsn(ASTORE, 5);
        Label label17 = new Label();
        methodVisitor.visitLabel(label17);
        methodVisitor.visitLineNumber(120, label17);
        methodVisitor.visitVarInsn(ALOAD, 5);
        Label label18 = new Label();
        methodVisitor.visitJumpInsn(IFNONNULL, label18);
        Label label19 = new Label();
        methodVisitor.visitLabel(label19);
        methodVisitor.visitLineNumber(121, label19);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/concurrent/locks/Condition", "await", "()V", true);
        Label label20 = new Label();
        methodVisitor.visitJumpInsn(GOTO, label20);
        methodVisitor.visitLabel(label18);
        methodVisitor.visitLineNumber(123, label18);
        methodVisitor.visitInsn(LCONST_1);
        methodVisitor.visitVarInsn(LSTORE, 6);
        Label label21 = new Label();
        methodVisitor.visitLabel(label21);
        methodVisitor.visitLineNumber(124, label21);
        methodVisitor.visitVarInsn(LLOAD, 6);
        methodVisitor.visitInsn(LCONST_0);
        methodVisitor.visitInsn(LCMP);
        Label label22 = new Label();
        methodVisitor.visitJumpInsn(IFGT, label22);
        Label label23 = new Label();
        methodVisitor.visitLabel(label23);
        methodVisitor.visitLineNumber(125, label23);
        methodVisitor.visitVarInsn(ALOAD, 3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/PriorityQueue", "poll", "()Ljava/lang/Object;", false);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitLabel(label22);
        methodVisitor.visitLineNumber(126, label22);
        methodVisitor.visitInsn(ACONST_NULL);
        methodVisitor.visitVarInsn(ASTORE, 5);
        Label label24 = new Label();
        methodVisitor.visitLabel(label24);
        methodVisitor.visitLineNumber(127, label24);
        methodVisitor.visitVarInsn(ALOAD, 4);
        Label label25 = new Label();
        methodVisitor.visitJumpInsn(IFNULL, label25);
        Label label26 = new Label();
        methodVisitor.visitLabel(label26);
        methodVisitor.visitLineNumber(128, label26);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/concurrent/locks/Condition", "await", "()V", true);
        methodVisitor.visitJumpInsn(GOTO, label20);
        methodVisitor.visitLabel(label25);
        methodVisitor.visitLineNumber(130, label25);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;", false);
        methodVisitor.visitVarInsn(ASTORE, 8);
        Label label27 = new Label();
        methodVisitor.visitLabel(label27);
        methodVisitor.visitLineNumber(131, label27);
        methodVisitor.visitVarInsn(ALOAD, 8);
        methodVisitor.visitVarInsn(ASTORE, 4);
        methodVisitor.visitLabel(label3);
        methodVisitor.visitLineNumber(133, label3);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitVarInsn(LLOAD, 6);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/concurrent/locks/Condition", "awaitNanos", "(J)J", true);
        methodVisitor.visitInsn(POP2);
        methodVisitor.visitLabel(label4);
        methodVisitor.visitLineNumber(135, label4);
        methodVisitor.visitVarInsn(ALOAD, 4);
        methodVisitor.visitVarInsn(ALOAD, 8);
        methodVisitor.visitJumpInsn(IF_ACMPNE, label20);
        Label label28 = new Label();
        methodVisitor.visitLabel(label28);
        methodVisitor.visitLineNumber(136, label28);
        methodVisitor.visitInsn(ACONST_NULL);
        methodVisitor.visitVarInsn(ASTORE, 4);
        methodVisitor.visitJumpInsn(GOTO, label20);
        methodVisitor.visitLabel(label5);
        methodVisitor.visitLineNumber(135, label5);
        methodVisitor.visitVarInsn(ASTORE, 9);
        methodVisitor.visitLabel(label6);
        methodVisitor.visitVarInsn(ALOAD, 4);
        methodVisitor.visitVarInsn(ALOAD, 8);
        Label label29 = new Label();
        methodVisitor.visitJumpInsn(IF_ACMPNE, label29);
        Label label30 = new Label();
        methodVisitor.visitLabel(label30);
        methodVisitor.visitLineNumber(136, label30);
        methodVisitor.visitInsn(ACONST_NULL);
        methodVisitor.visitVarInsn(ASTORE, 4);
        methodVisitor.visitLabel(label29);
        methodVisitor.visitLineNumber(137, label29);
        methodVisitor.visitVarInsn(ALOAD, 9);
        methodVisitor.visitInsn(ATHROW);
        methodVisitor.visitLabel(label20);
        methodVisitor.visitLineNumber(140, label20);
        methodVisitor.visitJumpInsn(GOTO, label7);
        methodVisitor.visitLabel(label8);
        methodVisitor.visitLineNumber(141, label8);
        methodVisitor.visitVarInsn(ASTORE, 5);
        Label label31 = new Label();
        methodVisitor.visitLabel(label31);
        methodVisitor.visitLineNumber(142, label31);
        methodVisitor.visitVarInsn(ALOAD, 5);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/InterruptedException", "printStackTrace", "()V", false);
        methodVisitor.visitLabel(label9);
        methodVisitor.visitLineNumber(144, label9);
        methodVisitor.visitVarInsn(ALOAD, 4);
        Label label32 = new Label();
        methodVisitor.visitJumpInsn(IFNONNULL, label32);
        methodVisitor.visitVarInsn(ALOAD, 3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/PriorityQueue", "peek", "()Ljava/lang/Object;", false);
        methodVisitor.visitJumpInsn(IFNULL, label32);
        Label label33 = new Label();
        methodVisitor.visitLabel(label33);
        methodVisitor.visitLineNumber(145, label33);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/concurrent/locks/Condition", "signal", "()V", true);
        methodVisitor.visitLabel(label32);
        methodVisitor.visitLineNumber(146, label32);
        methodVisitor.visitVarInsn(ALOAD, 1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/locks/ReentrantLock", "unlock", "()V", false);
        Label label34 = new Label();
        methodVisitor.visitLabel(label34);
        methodVisitor.visitLineNumber(147, label34);
        Label label35 = new Label();
        methodVisitor.visitJumpInsn(GOTO, label35);
        methodVisitor.visitLabel(label10);
        methodVisitor.visitLineNumber(144, label10);
        methodVisitor.visitVarInsn(ASTORE, 10);
        methodVisitor.visitLabel(label11);
        methodVisitor.visitVarInsn(ALOAD, 4);
        Label label36 = new Label();
        methodVisitor.visitJumpInsn(IFNONNULL, label36);
        methodVisitor.visitVarInsn(ALOAD, 3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/PriorityQueue", "peek", "()Ljava/lang/Object;", false);
        methodVisitor.visitJumpInsn(IFNULL, label36);
        Label label37 = new Label();
        methodVisitor.visitLabel(label37);
        methodVisitor.visitLineNumber(145, label37);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/concurrent/locks/Condition", "signal", "()V", true);
        methodVisitor.visitLabel(label36);
        methodVisitor.visitLineNumber(146, label36);
        methodVisitor.visitVarInsn(ALOAD, 1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/locks/ReentrantLock", "unlock", "()V", false);
        Label label38 = new Label();
        methodVisitor.visitLabel(label38);
        methodVisitor.visitLineNumber(147, label38);
        methodVisitor.visitVarInsn(ALOAD, 10);
        methodVisitor.visitInsn(ATHROW);
        methodVisitor.visitLabel(label35);
        methodVisitor.visitLineNumber(148, label35);
        methodVisitor.visitInsn(RETURN);
        Label label39 = new Label();
        methodVisitor.visitLabel(label39);
        methodVisitor.visitLocalVariable("e", "Ljava/lang/InterruptedException;", null, label16, label7, 5);
        methodVisitor.visitLocalVariable("thisThread", "Ljava/lang/Thread;", null, label27, label20, 8);
        methodVisitor.visitLocalVariable("delay", "J", null, label21, label20, 6);
        methodVisitor.visitLocalVariable("first", "Ljava/lang/Object;", null, label17, label20, 5);
        methodVisitor.visitLocalVariable("e", "Ljava/lang/InterruptedException;", null, label31, label9, 5);
        methodVisitor.visitLocalVariable("lock", "Ljava/util/concurrent/locks/ReentrantLock;", null, label13, label39, 1);
        methodVisitor.visitLocalVariable("available", "Ljava/util/concurrent/locks/Condition;", null, label14, label39, 2);
        methodVisitor.visitLocalVariable("q", "Ljava/util/PriorityQueue;", "Ljava/util/PriorityQueue<Ljava/lang/Object;>;", label15, label39, 3);
        methodVisitor.visitLocalVariable("leader", "Ljava/lang/Thread;", null, label0, label39, 4);
        methodVisitor.visitMaxs(4, 11);
        methodVisitor.visitEnd();
    }
}
