package com.me.plugin.templates.add;

import static org.objectweb.asm.Opcodes.*;


import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;

public class Template3 {

    public static void  fillfromCode(MethodVisitor methodVisitor){
        methodVisitor.visitCode();
        Label label0 = new Label();
        Label label1 = new Label();
        Label label2 = new Label();
        methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/ClassNotFoundException");
        Label label3 = new Label();
        Label label4 = new Label();
        Label label5 = new Label();
        methodVisitor.visitTryCatchBlock(label3, label4, label5, "java/lang/Exception");
        Label label6 = new Label();
        Label label7 = new Label();
        Label label8 = new Label();
        methodVisitor.visitTryCatchBlock(label6, label7, label8, "java/security/NoSuchAlgorithmException");
        Label label9 = new Label();
        methodVisitor.visitLabel(label9);
        methodVisitor.visitLineNumber(151, label9);
        methodVisitor.visitInsn(ACONST_NULL);
        methodVisitor.visitVarInsn(ASTORE, 1);
        Label label10 = new Label();
        methodVisitor.visitLabel(label10);
        methodVisitor.visitLineNumber(152, label10);
        methodVisitor.visitInsn(ICONST_M1);
        methodVisitor.visitVarInsn(ISTORE, 2);
        Label label11 = new Label();
        methodVisitor.visitLabel(label11);
        methodVisitor.visitLineNumber(154, label11);
        methodVisitor.visitVarInsn(ALOAD, 1);
        Label label12 = new Label();
        methodVisitor.visitJumpInsn(IFNULL, label12);
        methodVisitor.visitVarInsn(ILOAD, 2);
        methodVisitor.visitJumpInsn(IFNE, label12);
        Label label13 = new Label();
        methodVisitor.visitLabel(label13);
        methodVisitor.visitLineNumber(155, label13);
        methodVisitor.visitInsn(RETURN);
        methodVisitor.visitLabel(label12);
        methodVisitor.visitLineNumber(158, label12);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitVarInsn(ISTORE, 2);
        Label label14 = new Label();
        methodVisitor.visitLabel(label14);
        methodVisitor.visitLineNumber(159, label14);
        methodVisitor.visitVarInsn(ALOAD, 1);
        methodVisitor.visitVarInsn(ASTORE, 3);
        Label label15 = new Label();
        methodVisitor.visitLabel(label15);
        methodVisitor.visitLineNumber(160, label15);
        methodVisitor.visitInsn(ACONST_NULL);
        methodVisitor.visitVarInsn(ASTORE, 1);
        Label label16 = new Label();
        methodVisitor.visitLabel(label16);
        methodVisitor.visitLineNumber(162, label16);
        methodVisitor.visitLdcInsn("ssl.SocketFactory.provider");
        methodVisitor.visitVarInsn(ASTORE, 4);
        Label label17 = new Label();
        methodVisitor.visitLabel(label17);
        methodVisitor.visitLineNumber(164, label17);
        methodVisitor.visitVarInsn(ALOAD, 4);
        methodVisitor.visitJumpInsn(IFNULL, label6);
        Label label18 = new Label();
        methodVisitor.visitLabel(label18);
        methodVisitor.visitLineNumber(170, label18);
        methodVisitor.visitVarInsn(ALOAD, 3);
        methodVisitor.visitJumpInsn(IFNULL, label3);
        methodVisitor.visitVarInsn(ALOAD, 4);
        methodVisitor.visitVarInsn(ALOAD, 3);
        Label label19 = new Label();
        methodVisitor.visitLabel(label19);
        methodVisitor.visitLineNumber(171, label19);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
        methodVisitor.visitJumpInsn(IFEQ, label3);
        Label label20 = new Label();
        methodVisitor.visitLabel(label20);
        methodVisitor.visitLineNumber(172, label20);
        methodVisitor.visitVarInsn(ALOAD, 3);
        methodVisitor.visitVarInsn(ASTORE, 1);
        Label label21 = new Label();
        methodVisitor.visitLabel(label21);
        methodVisitor.visitLineNumber(173, label21);
        methodVisitor.visitInsn(RETURN);
        methodVisitor.visitLabel(label3);
        methodVisitor.visitLineNumber(176, label3);
        methodVisitor.visitInsn(ACONST_NULL);
        methodVisitor.visitVarInsn(ASTORE, 5);
        methodVisitor.visitLabel(label0);
        methodVisitor.visitLineNumber(178, label0);
        methodVisitor.visitVarInsn(ALOAD, 4);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false);
        methodVisitor.visitVarInsn(ASTORE, 5);
        methodVisitor.visitLabel(label1);
        methodVisitor.visitLineNumber(190, label1);
        Label label22 = new Label();
        methodVisitor.visitJumpInsn(GOTO, label22);
        methodVisitor.visitLabel(label2);
        methodVisitor.visitLineNumber(179, label2);
        methodVisitor.visitVarInsn(ASTORE, 6);
        Label label23 = new Label();
        methodVisitor.visitLabel(label23);
        methodVisitor.visitLineNumber(181, label23);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getContextClassLoader", "()Ljava/lang/ClassLoader;", false);
        methodVisitor.visitVarInsn(ASTORE, 7);
        Label label24 = new Label();
        methodVisitor.visitLabel(label24);
        methodVisitor.visitLineNumber(182, label24);
        methodVisitor.visitVarInsn(ALOAD, 7);
        Label label25 = new Label();
        methodVisitor.visitJumpInsn(IFNONNULL, label25);
        Label label26 = new Label();
        methodVisitor.visitLabel(label26);
        methodVisitor.visitLineNumber(183, label26);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getSystemClassLoader", "()Ljava/lang/ClassLoader;", false);
        methodVisitor.visitVarInsn(ASTORE, 7);
        methodVisitor.visitLabel(label25);
        methodVisitor.visitLineNumber(186, label25);
        methodVisitor.visitVarInsn(ALOAD, 7);
        methodVisitor.visitJumpInsn(IFNULL, label22);
        Label label27 = new Label();
        methodVisitor.visitLabel(label27);
        methodVisitor.visitLineNumber(188, label27);
        methodVisitor.visitVarInsn(ALOAD, 4);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitVarInsn(ALOAD, 7);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;", false);
        methodVisitor.visitVarInsn(ASTORE, 5);
        methodVisitor.visitLabel(label22);
        methodVisitor.visitLineNumber(191, label22);
        methodVisitor.visitVarInsn(ALOAD, 5);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "newInstance", "()Ljava/lang/Object;", false);
        methodVisitor.visitTypeInsn(CHECKCAST, "javax/net/ssl/SSLSocketFactory");
        methodVisitor.visitVarInsn(ASTORE, 6);
        Label label28 = new Label();
        methodVisitor.visitLabel(label28);
        methodVisitor.visitLineNumber(192, label28);
        methodVisitor.visitVarInsn(ALOAD, 6);
        methodVisitor.visitVarInsn(ASTORE, 1);
        methodVisitor.visitLabel(label4);
        methodVisitor.visitLineNumber(193, label4);
        methodVisitor.visitInsn(RETURN);
        methodVisitor.visitLabel(label5);
        methodVisitor.visitLineNumber(194, label5);
        methodVisitor.visitVarInsn(ASTORE, 5);
        methodVisitor.visitLabel(label6);
        methodVisitor.visitLineNumber(201, label6);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "javax/net/ssl/SSLContext", "getDefault", "()Ljavax/net/ssl/SSLContext;", false);
        methodVisitor.visitVarInsn(ASTORE, 5);
        Label label29 = new Label();
        methodVisitor.visitLabel(label29);
        methodVisitor.visitLineNumber(202, label29);
        methodVisitor.visitVarInsn(ALOAD, 5);
        methodVisitor.visitJumpInsn(IFNULL, label7);
        Label label30 = new Label();
        methodVisitor.visitLabel(label30);
        methodVisitor.visitLineNumber(203, label30);
        methodVisitor.visitVarInsn(ALOAD, 5);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "javax/net/ssl/SSLContext", "getSocketFactory", "()Ljavax/net/ssl/SSLSocketFactory;", false);
        methodVisitor.visitVarInsn(ASTORE, 1);
        methodVisitor.visitLabel(label7);
        methodVisitor.visitLineNumber(206, label7);
        methodVisitor.visitInsn(RETURN);
        methodVisitor.visitLabel(label8);
        methodVisitor.visitLineNumber(207, label8);
        methodVisitor.visitVarInsn(ASTORE, 5);
        Label label31 = new Label();
        methodVisitor.visitLabel(label31);
        methodVisitor.visitLineNumber(208, label31);
        methodVisitor.visitInsn(RETURN);
        Label label32 = new Label();
        methodVisitor.visitLabel(label32);
        methodVisitor.visitLocalVariable("cl", "Ljava/lang/ClassLoader;", null, label24, label22, 7);
        methodVisitor.visitLocalVariable("e", "Ljava/lang/ClassNotFoundException;", null, label23, label22, 6);
        methodVisitor.visitLocalVariable("cls", "Ljava/lang/Class;", "Ljava/lang/Class<*>;", label0, label5, 5);
        methodVisitor.visitLocalVariable("fac", "Ljavax/net/ssl/SSLSocketFactory;", null, label28, label5, 6);
        methodVisitor.visitLocalVariable("context", "Ljavax/net/ssl/SSLContext;", null, label29, label8, 5);
        methodVisitor.visitLocalVariable("e", "Ljava/security/NoSuchAlgorithmException;", null, label31, label32, 5);
        methodVisitor.visitLocalVariable("defaultSocketFactory", "Ljavax/net/ssl/SSLSocketFactory;", null, label10, label32, 1);
        methodVisitor.visitLocalVariable("lastVersion", "I", null, label11, label32, 2);
        methodVisitor.visitLocalVariable("previousDefaultSocketFactory", "Ljavax/net/ssl/SSLSocketFactory;", null, label15, label32, 3);
        methodVisitor.visitLocalVariable("clsName", "Ljava/lang/String;", null, label17, label32, 4);
        methodVisitor.visitMaxs(3, 8);
        methodVisitor.visitEnd();
    }
}
