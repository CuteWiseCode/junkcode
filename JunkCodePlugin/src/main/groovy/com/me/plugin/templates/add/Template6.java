package com.me.plugin.templates.add;

import static org.objectweb.asm.Opcodes.*;


import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;

public class Template6 {

    public static void  fillfromCode(MethodVisitor methodVisitor){
        methodVisitor.visitCode();
        Label label0 = new Label();
        methodVisitor.visitLabel(label0);
        methodVisitor.visitLineNumber(505, label0);
        methodVisitor.visitTypeInsn(NEW, "java/util/HashMap");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
        methodVisitor.visitVarInsn(ASTORE, 1);
        Label label1 = new Label();
        methodVisitor.visitLabel(label1);
        methodVisitor.visitLineNumber(506, label1);
        methodVisitor.visitLdcInsn("abcdefg");
        methodVisitor.visitVarInsn(ASTORE, 2);
        Label label2 = new Label();
        methodVisitor.visitLabel(label2);
        methodVisitor.visitLineNumber(507, label2);
        methodVisitor.visitInsn(ICONST_0);
        methodVisitor.visitVarInsn(ISTORE, 3);
        Label label3 = new Label();
        methodVisitor.visitLabel(label3);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
        Label label4 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPGE, label4);
        Label label5 = new Label();
        methodVisitor.visitLabel(label5);
        methodVisitor.visitLineNumber(508, label5);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
        methodVisitor.visitVarInsn(ISTORE, 4);
        Label label6 = new Label();
        methodVisitor.visitLabel(label6);
        methodVisitor.visitLineNumber(509, label6);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 65);
        Label label7 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPLT, label7);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 90);
        Label label8 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPLE, label8);
        methodVisitor.visitLabel(label7);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 97);
        Label label9 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPLT, label9);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 122);
        methodVisitor.visitJumpInsn(IF_ICMPGT, label9);
        methodVisitor.visitLabel(label8);
        methodVisitor.visitLineNumber(510, label8);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitIincInsn(3, 1);
        methodVisitor.visitVarInsn(ISTORE, 5);
        Label label10 = new Label();
        methodVisitor.visitLabel(label10);
        methodVisitor.visitLineNumber(511, label10);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
        Label label11 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPGE, label11);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitJumpInsn(IF_ICMPNE, label11);
        methodVisitor.visitIincInsn(3, 1);
        methodVisitor.visitJumpInsn(GOTO, label10);
        methodVisitor.visitLabel(label11);
        methodVisitor.visitLineNumber(512, label11);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitVarInsn(ILOAD, 5);
        methodVisitor.visitInsn(ISUB);
        methodVisitor.visitVarInsn(ISTORE, 6);
        Label label12 = new Label();
        methodVisitor.visitLabel(label12);
        methodVisitor.visitLineNumber(514, label12);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 112);
        Label label13 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPNE, label13);
        Label label14 = new Label();
        methodVisitor.visitLabel(label14);
        methodVisitor.visitLineNumber(515, label14);
        methodVisitor.visitInsn(ICONST_0);
        methodVisitor.visitVarInsn(ISTORE, 7);
        Label label15 = new Label();
        methodVisitor.visitLabel(label15);
        methodVisitor.visitLineNumber(516, label15);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
        Label label16 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPGE, label16);
        Label label17 = new Label();
        methodVisitor.visitLabel(label17);
        methodVisitor.visitLineNumber(517, label17);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
        methodVisitor.visitVarInsn(ISTORE, 4);
        Label label18 = new Label();
        methodVisitor.visitLabel(label18);
        methodVisitor.visitLineNumber(518, label18);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 65);
        Label label19 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPLT, label19);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 90);
        Label label20 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPLE, label20);
        methodVisitor.visitLabel(label19);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 97);
        methodVisitor.visitJumpInsn(IF_ICMPLT, label16);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 122);
        methodVisitor.visitJumpInsn(IF_ICMPGT, label16);
        methodVisitor.visitLabel(label20);
        methodVisitor.visitLineNumber(519, label20);
        methodVisitor.visitVarInsn(ILOAD, 6);
        methodVisitor.visitVarInsn(ISTORE, 7);
        Label label21 = new Label();
        methodVisitor.visitLabel(label21);
        methodVisitor.visitLineNumber(520, label21);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitIincInsn(3, 1);
        methodVisitor.visitVarInsn(ISTORE, 5);
        Label label22 = new Label();
        methodVisitor.visitLabel(label22);
        methodVisitor.visitLineNumber(521, label22);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
        Label label23 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPGE, label23);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitJumpInsn(IF_ICMPNE, label23);
        methodVisitor.visitIincInsn(3, 1);
        methodVisitor.visitJumpInsn(GOTO, label22);
        methodVisitor.visitLabel(label23);
        methodVisitor.visitLineNumber(523, label23);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitVarInsn(ILOAD, 5);
        methodVisitor.visitInsn(ISUB);
        methodVisitor.visitVarInsn(ISTORE, 6);
        methodVisitor.visitLabel(label16);
        methodVisitor.visitLineNumber(526, label16);
        methodVisitor.visitVarInsn(ILOAD, 7);
        methodVisitor.visitJumpInsn(IFNE, label13);
        Label label24 = new Label();
        methodVisitor.visitLabel(label24);
        methodVisitor.visitLineNumber(527, label24);
        methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
        methodVisitor.visitLdcInsn("Pad letter 'p' must be followed by valid pad pattern: ");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
        methodVisitor.visitInsn(ATHROW);
        methodVisitor.visitLabel(label13);
        methodVisitor.visitLineNumber(533, label13);
        methodVisitor.visitVarInsn(ALOAD, 1);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "valueOf", "(C)Ljava/lang/Character;", false);
        methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
        methodVisitor.visitTypeInsn(CHECKCAST, "java/time/temporal/TemporalField");
        methodVisitor.visitVarInsn(ASTORE, 7);
        Label label25 = new Label();
        methodVisitor.visitLabel(label25);
        methodVisitor.visitLineNumber(534, label25);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 120);
        Label label26 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPNE, label26);
        Label label27 = new Label();
        methodVisitor.visitLabel(label27);
        methodVisitor.visitLineNumber(535, label27);
        methodVisitor.visitVarInsn(ILOAD, 6);
        methodVisitor.visitInsn(ICONST_5);
        Label label28 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPLE, label28);
        Label label29 = new Label();
        methodVisitor.visitLabel(label29);
        methodVisitor.visitLineNumber(536, label29);
        methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
        methodVisitor.visitLdcInsn("Too many pattern letters: ");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(C)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
        methodVisitor.visitInsn(ATHROW);
        methodVisitor.visitLabel(label28);
        methodVisitor.visitLineNumber(538, label28);
        methodVisitor.visitVarInsn(ILOAD, 6);
        methodVisitor.visitInsn(ICONST_1);
        Label label30 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPNE, label30);
        methodVisitor.visitLdcInsn("+00");
        Label label31 = new Label();
        methodVisitor.visitJumpInsn(GOTO, label31);
        methodVisitor.visitLabel(label30);
        methodVisitor.visitVarInsn(ILOAD, 6);
        methodVisitor.visitInsn(ICONST_2);
        methodVisitor.visitInsn(IREM);
        Label label32 = new Label();
        methodVisitor.visitJumpInsn(IFNE, label32);
        methodVisitor.visitLdcInsn("+0000");
        methodVisitor.visitJumpInsn(GOTO, label31);
        methodVisitor.visitLabel(label32);
        methodVisitor.visitLdcInsn("+00:00");
        methodVisitor.visitLabel(label31);
        methodVisitor.visitVarInsn(ASTORE, 8);
        Label label33 = new Label();
        methodVisitor.visitLabel(label33);
        methodVisitor.visitLineNumber(539, label33);
        Label label34 = new Label();
        methodVisitor.visitJumpInsn(GOTO, label34);
        methodVisitor.visitLabel(label26);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 87);
        Label label35 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPNE, label35);
        Label label36 = new Label();
        methodVisitor.visitLabel(label36);
        methodVisitor.visitLineNumber(541, label36);
        methodVisitor.visitVarInsn(ILOAD, 6);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitJumpInsn(IF_ICMPLE, label34);
        Label label37 = new Label();
        methodVisitor.visitLabel(label37);
        methodVisitor.visitLineNumber(542, label37);
        methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
        methodVisitor.visitLdcInsn("Too many pattern letters: ");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(C)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
        methodVisitor.visitInsn(ATHROW);
        methodVisitor.visitLabel(label35);
        methodVisitor.visitLineNumber(544, label35);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 119);
        Label label38 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPNE, label38);
        Label label39 = new Label();
        methodVisitor.visitLabel(label39);
        methodVisitor.visitLineNumber(546, label39);
        methodVisitor.visitVarInsn(ILOAD, 6);
        methodVisitor.visitInsn(ICONST_2);
        methodVisitor.visitJumpInsn(IF_ICMPLE, label34);
        Label label40 = new Label();
        methodVisitor.visitLabel(label40);
        methodVisitor.visitLineNumber(547, label40);
        methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
        methodVisitor.visitLdcInsn("Too many pattern letters: ");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(C)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
        methodVisitor.visitInsn(ATHROW);
        methodVisitor.visitLabel(label38);
        methodVisitor.visitLineNumber(549, label38);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 89);
        Label label41 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPNE, label41);
        methodVisitor.visitJumpInsn(GOTO, label34);
        methodVisitor.visitLabel(label41);
        methodVisitor.visitLineNumber(552, label41);
        methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
        methodVisitor.visitLdcInsn("Unknown pattern letter: ");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(C)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
        methodVisitor.visitInsn(ATHROW);
        methodVisitor.visitLabel(label34);
        methodVisitor.visitLineNumber(554, label34);
        methodVisitor.visitIincInsn(3, -1);
        Label label42 = new Label();
        methodVisitor.visitLabel(label42);
        methodVisitor.visitLineNumber(556, label42);
        Label label43 = new Label();
        methodVisitor.visitJumpInsn(GOTO, label43);
        methodVisitor.visitLabel(label9);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 39);
        Label label44 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPNE, label44);
        Label label45 = new Label();
        methodVisitor.visitLabel(label45);
        methodVisitor.visitLineNumber(558, label45);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitIincInsn(3, 1);
        methodVisitor.visitVarInsn(ISTORE, 5);
        Label label46 = new Label();
        methodVisitor.visitLabel(label46);
        methodVisitor.visitLineNumber(559, label46);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
        Label label47 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPGE, label47);
        Label label48 = new Label();
        methodVisitor.visitLabel(label48);
        methodVisitor.visitLineNumber(560, label48);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
        methodVisitor.visitIntInsn(BIPUSH, 39);
        Label label49 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPNE, label49);
        Label label50 = new Label();
        methodVisitor.visitLabel(label50);
        methodVisitor.visitLineNumber(561, label50);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitInsn(IADD);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
        methodVisitor.visitJumpInsn(IF_ICMPGE, label47);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitInsn(IADD);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
        methodVisitor.visitIntInsn(BIPUSH, 39);
        methodVisitor.visitJumpInsn(IF_ICMPNE, label47);
        Label label51 = new Label();
        methodVisitor.visitLabel(label51);
        methodVisitor.visitLineNumber(562, label51);
        methodVisitor.visitIincInsn(3, 1);
        methodVisitor.visitLabel(label49);
        methodVisitor.visitLineNumber(559, label49);
        methodVisitor.visitIincInsn(3, 1);
        methodVisitor.visitJumpInsn(GOTO, label46);
        methodVisitor.visitLabel(label47);
        methodVisitor.visitLineNumber(568, label47);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
        Label label52 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPLT, label52);
        Label label53 = new Label();
        methodVisitor.visitLabel(label53);
        methodVisitor.visitLineNumber(569, label53);
        methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
        methodVisitor.visitLdcInsn("Pattern ends with an incomplete string literal: ");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
        methodVisitor.visitInsn(ATHROW);
        methodVisitor.visitLabel(label52);
        methodVisitor.visitLineNumber(571, label52);
        methodVisitor.visitVarInsn(ALOAD, 2);
        methodVisitor.visitVarInsn(ILOAD, 5);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitInsn(IADD);
        methodVisitor.visitVarInsn(ILOAD, 3);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
        methodVisitor.visitVarInsn(ASTORE, 6);
        Label label54 = new Label();
        methodVisitor.visitLabel(label54);
        methodVisitor.visitLineNumber(574, label54);
        methodVisitor.visitJumpInsn(GOTO, label43);
        methodVisitor.visitLabel(label44);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 123);
        Label label55 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPEQ, label55);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 125);
        methodVisitor.visitJumpInsn(IF_ICMPEQ, label55);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitIntInsn(BIPUSH, 35);
        methodVisitor.visitJumpInsn(IF_ICMPNE, label43);
        methodVisitor.visitLabel(label55);
        methodVisitor.visitLineNumber(575, label55);
        methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
        methodVisitor.visitLdcInsn("Pattern includes reserved character: '");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitVarInsn(ILOAD, 4);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(C)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitLdcInsn("'");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
        methodVisitor.visitInsn(ATHROW);
        methodVisitor.visitLabel(label43);
        methodVisitor.visitLineNumber(507, label43);
        methodVisitor.visitIincInsn(3, 1);
        methodVisitor.visitJumpInsn(GOTO, label3);
        methodVisitor.visitLabel(label4);
        methodVisitor.visitLineNumber(578, label4);
        methodVisitor.visitInsn(RETURN);
        Label label56 = new Label();
        methodVisitor.visitLabel(label56);
        methodVisitor.visitLocalVariable("pad", "I", null, label15, label13, 7);
        methodVisitor.visitLocalVariable("start", "I", null, label10, label42, 5);
        methodVisitor.visitLocalVariable("count", "I", null, label12, label42, 6);
        methodVisitor.visitLocalVariable("field", "Ljava/time/temporal/TemporalField;", null, label25, label42, 7);
        methodVisitor.visitLocalVariable("start", "I", null, label46, label54, 5);
        methodVisitor.visitLocalVariable("cur", "C", null, label6, label43, 4);
        methodVisitor.visitLocalVariable("pos", "I", null, label3, label4, 3);
        methodVisitor.visitLocalVariable("FIELD_MAP", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/Character;Ljava/time/temporal/TemporalField;>;", label1, label56, 1);
        methodVisitor.visitLocalVariable("pattern", "Ljava/lang/String;", null, label2, label56, 2);
        methodVisitor.visitMaxs(4, 9);
        methodVisitor.visitEnd();
    }
}
