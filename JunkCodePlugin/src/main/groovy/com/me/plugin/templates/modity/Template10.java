package com.me.plugin.templates.modity;

import static org.objectweb.asm.Opcodes.*;

import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;

public class Template10 {

    public static void  modifyFromCode(MethodVisitor methodVisitor,int index){
        Label label0 = new Label();
        Label label1 = new Label();
        Label label2 = new Label();
        methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/Exception");
        Label label3 = new Label();
        methodVisitor.visitLabel(label3);
        methodVisitor.visitLineNumber(381, label3);
        methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/Double", "TYPE", "Ljava/lang/Class;");
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "identityHashCode", "(Ljava/lang/Object;)I", false);
        methodVisitor.visitInsn(I2L);
        methodVisitor.visitLdcInsn(new Long(60000L));
        methodVisitor.visitInsn(LAND);
        methodVisitor.visitInsn(LCONST_0);
        methodVisitor.visitInsn(LCMP);
        Label label4 = new Label();
        methodVisitor.visitJumpInsn(IFNE, label4);
        methodVisitor.visitLabel(label0);
        methodVisitor.visitLineNumber(383, label0);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false);
        methodVisitor.visitInsn(L2D);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Double", "doubleToLongBits", "(D)J", false);
        methodVisitor.visitInsn(POP2);
        Label label5 = new Label();
        methodVisitor.visitLabel(label5);
        methodVisitor.visitLineNumber(384, label5);
        methodVisitor.visitTypeInsn(NEW, "java/util/Hashtable");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/Hashtable", "<init>", "()V", false);

        int v0 = ++index;
        methodVisitor.visitVarInsn(ASTORE, v0);
        Label label6 = new Label();
        methodVisitor.visitLabel(label6);
        methodVisitor.visitLineNumber(385, label6);
        methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
        methodVisitor.visitLdcInsn("Checking... (no more output means success)");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
        Label label7 = new Label();
        methodVisitor.visitLabel(label7);
        methodVisitor.visitLineNumber(386, label7);
        methodVisitor.visitIntInsn(BIPUSH, 37);

        int v1 = ++index;
        methodVisitor.visitVarInsn(ISTORE, v1);
        Label label8 = new Label();
        methodVisitor.visitLabel(label8);
        methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/util/Hashtable", Opcodes.INTEGER}, 0, null);
        methodVisitor.visitVarInsn(ILOAD, v1);
        Label label9 = new Label();
        methodVisitor.visitJumpInsn(IFEQ, label9);
        Label label10 = new Label();
        methodVisitor.visitLabel(label10);
        methodVisitor.visitLineNumber(387, label10);
        methodVisitor.visitVarInsn(ALOAD, v0);
        methodVisitor.visitVarInsn(ILOAD, v1);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
        methodVisitor.visitVarInsn(ILOAD, v1);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Hashtable", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        methodVisitor.visitInsn(POP);
        Label label11 = new Label();
        methodVisitor.visitLabel(label11);
        methodVisitor.visitLineNumber(386, label11);
        methodVisitor.visitVarInsn(ILOAD, v1);
        methodVisitor.visitIntInsn(BIPUSH, 37);
        methodVisitor.visitInsn(IADD);
        methodVisitor.visitIntInsn(SIPUSH, 4000);
        methodVisitor.visitInsn(IREM);
        methodVisitor.visitVarInsn(ISTORE, v1);
        methodVisitor.visitJumpInsn(GOTO, label8);
        methodVisitor.visitLabel(label9);
        methodVisitor.visitLineNumber(389, label9);
        methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitVarInsn(ISTORE, v1);
        Label label12 = new Label();
        methodVisitor.visitLabel(label12);
        methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
        methodVisitor.visitVarInsn(ILOAD, v1);
        methodVisitor.visitIntInsn(SIPUSH, 4000);
        Label label13 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPGE, label13);
        Label label14 = new Label();
        methodVisitor.visitLabel(label14);
        methodVisitor.visitLineNumber(390, label14);
        methodVisitor.visitVarInsn(ALOAD, v0);
        methodVisitor.visitVarInsn(ILOAD, v1);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Hashtable", "remove", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
        methodVisitor.visitInsn(POP);
        Label label15 = new Label();
        methodVisitor.visitLabel(label15);
        methodVisitor.visitLineNumber(389, label15);
        methodVisitor.visitIincInsn(v1, 2);
        methodVisitor.visitJumpInsn(GOTO, label12);
        methodVisitor.visitLabel(label13);
        methodVisitor.visitLineNumber(392, label13);
        methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
        methodVisitor.visitInsn(ICONST_2);
        methodVisitor.visitVarInsn(ISTORE, v1);
        Label label16 = new Label();
        methodVisitor.visitLabel(label16);
        methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
        methodVisitor.visitVarInsn(ILOAD, v1);
        methodVisitor.visitIntInsn(SIPUSH, 4000);
        Label label17 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPGE, label17);
        Label label18 = new Label();
        methodVisitor.visitLabel(label18);
        methodVisitor.visitLineNumber(393, label18);
        methodVisitor.visitVarInsn(ALOAD, v0);
        methodVisitor.visitVarInsn(ILOAD, v1);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Hashtable", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
        methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Integer");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Integer", "intValue", "()I", false);
        methodVisitor.visitVarInsn(ILOAD, v1);
        Label label19 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPEQ, label19);
        Label label20 = new Label();
        methodVisitor.visitLabel(label20);
        methodVisitor.visitLineNumber(394, label20);
        methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");

        int v2 = ++index;
        methodVisitor.visitVarInsn(ASTORE, v2);
        Label label21 = new Label();
        methodVisitor.visitLabel(label21);
        methodVisitor.visitLineNumber(395, label21);
        methodVisitor.visitVarInsn(ALOAD, v2);
        methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
        methodVisitor.visitLdcInsn("Find fails ");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitVarInsn(ILOAD, v1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
        methodVisitor.visitLabel(label19);
        methodVisitor.visitLineNumber(392, label19);
        methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        methodVisitor.visitIincInsn(v1, v2);
        methodVisitor.visitJumpInsn(GOTO, label16);
        methodVisitor.visitLabel(label17);
        methodVisitor.visitLineNumber(398, label17);
        methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitVarInsn(ISTORE, v1);
        Label label22 = new Label();
        methodVisitor.visitLabel(label22);
        methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
        methodVisitor.visitVarInsn(ILOAD, v1);
        methodVisitor.visitIntInsn(SIPUSH, 4000);
        Label label23 = new Label();
        methodVisitor.visitJumpInsn(IF_ICMPGE, label23);
        Label label24 = new Label();
        methodVisitor.visitLabel(label24);
        methodVisitor.visitLineNumber(399, label24);
        methodVisitor.visitVarInsn(ALOAD, v0);
        methodVisitor.visitVarInsn(ILOAD, v1);
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Hashtable", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
        Label label25 = new Label();
        methodVisitor.visitJumpInsn(IFNULL, label25);
        Label label26 = new Label();
        methodVisitor.visitLabel(label26);
        methodVisitor.visitLineNumber(400, label26);
        methodVisitor.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
        methodVisitor.visitVarInsn(ASTORE, v2);
        Label label27 = new Label();
        methodVisitor.visitLabel(label27);
        methodVisitor.visitLineNumber(401, label27);
        methodVisitor.visitVarInsn(ALOAD, v2);
        methodVisitor.visitTypeInsn(NEW, "java/lang/StringBuilder");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
        methodVisitor.visitLdcInsn("OOPS!!! ");
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitVarInsn(ILOAD, v1);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
        methodVisitor.visitLabel(label25);
        methodVisitor.visitLineNumber(398, label25);
        methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        methodVisitor.visitIincInsn(v1, v2);
        methodVisitor.visitJumpInsn(GOTO, label22);
        methodVisitor.visitLabel(label23);
        methodVisitor.visitLineNumber(405, label23);
        methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
        methodVisitor.visitLdcInsn("java.lang.String");
        methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false);
        methodVisitor.visitLdcInsn("main");
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Class");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitInsn(ICONST_0);
        methodVisitor.visitLdcInsn(Type.getType("[Ljava/lang/String;"));
        methodVisitor.visitInsn(AASTORE);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
        methodVisitor.visitInsn(ACONST_NULL);
        methodVisitor.visitInsn(ICONST_1);
        methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
        methodVisitor.visitInsn(DUP);
        methodVisitor.visitInsn(ICONST_0);
        methodVisitor.visitLdcInsn(Type.getType("[Ljava/lang/String;"));
        methodVisitor.visitInsn(AASTORE);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
        methodVisitor.visitInsn(POP);
        methodVisitor.visitLabel(label1);
        methodVisitor.visitLineNumber(408, label1);
        methodVisitor.visitJumpInsn(GOTO, label4);
        methodVisitor.visitLabel(label2);
        methodVisitor.visitLineNumber(406, label2);
        methodVisitor.visitFrame(Opcodes.F_FULL, 0, new Object[] {}, 1, new Object[] {"java/lang/Exception"});
        methodVisitor.visitVarInsn(ASTORE, v0);
        Label label28 = new Label();
        methodVisitor.visitLabel(label28);
        methodVisitor.visitLineNumber(407, label28);
        methodVisitor.visitVarInsn(ALOAD, v0);
        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
        methodVisitor.visitLabel(label4);
        methodVisitor.visitLineNumber(412, label4);
        methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);


    }
}
